@startuml

abstract User {
  # cpr : String
  + firstNames : String
  + lastName : String
  + birthDate : Date
  # signIn(username: String, password: String)
  # signOut()
}

class Patient extends User {
    + medicalHistory : MedicalHistory
    + homeDoctor: Doctor
    + doctorsRequestingMedicalHistory: List[Doctor]
    + getMedicalHistory(): MedicalHistory
    + requestAppointment(date: DateTime): None
    + allowMedicalHistoryView(Doctor): None
    + denyMedicalHistoryView(Doctor): None
}

class Secretary extends User {
    + appointmentRequests : List[Appointment]
    + bookAppointment(Appointment): None
    + cancelAppointment(Appointment): None
}

abstract Staff extends User {
  + schedule: WeekSchedule
  + accessedPatients: List[Patient]
  + async requestMedicalHistory(patient: Patient): Promise
  + viewMedicalHistory(patient: Patient): MedicalHistory
}

class Doctor extends Staff {
  + appointments : List<Appointment>
  + prescribePrescription(patient: Patient, prescription: Prescription): None
  + assignMedicalCondition(patient: Patient, medicalCondition: MedicalCondition): None
  + addNoteToAppointment(appointment: Appointment, note: String): None
}

class WeekSchedule {
    + monday: DaySchedule
    + tuesday: DaySchedule
    + wednesday: DaySchedule
    + thursday: DaySchedule
    + friday: DaySchedule
    + saturday: DaySchedule
    + sunday: DaySchedule
    + changeSchedule(day: DaySchedule, new: DaySchedule): None
}

class DaySchedule {
    + schedule: List[Shift]
    + addShift(shift: Shift): None
}

class Shift {
    + shiftStart: Float
    + shiftEnd: Float
    + setShift(start: Float, end: Float): None
}

class Appointment {
  + doctor : Doctor
  + patient : Patient
  + date : DateTime
  + note: String
}

class Prescription {
  + patient : Patient
  + doctor : Doctor
  + medication : String
  + date : DateTime
}

class MedicalHistory {
    + appointments : List<Appointment>
    + prescriptions : List<Prescription>
    + medicalConditions : List<MedicalCondition>
    + getAppointment(doctor: Doctor, date: Date): Appointment
    + getPrescription(doctor: Doctor, date: Date): Prescription
    + getMedicalCondition(condition: String): MedicalCondition
    + setAppointment(doctor: Doctor, date: Date): Appointment
    + setPrescription(doctor: Doctor, date: Date): Prescription
    + setMedicalCondition(condition: String): MedicalCondition
}

class MedicalCondition {
  + patient : Patient
  + condition : String
}

'User --> Patient : is a
'User --> Staff : is a
'Staff --> Doctor : is a
DaySchedule "1" o-- "*" Shift: has
WeekSchedule "1" o-- "7" DaySchedule: has
Patient --> MedicalHistory : has
Staff --> Patient : accesses
Staff --> WeekSchedule : has
MedicalHistory o-- Appointment : has/sets
MedicalHistory o-- Prescription : has/sets
MedicalHistory o-- MedicalCondition : has/sets

@enduml
